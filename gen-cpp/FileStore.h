/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef FileStore_H
#define FileStore_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "chord_types.h"



#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class FileStoreIf {
 public:
  virtual ~FileStoreIf() {}
  virtual void writeFile(const RFile& rFile) = 0;
};

class FileStoreIfFactory {
 public:
  typedef FileStoreIf Handler;

  virtual ~FileStoreIfFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(FileStoreIf* /* handler */) = 0;
};

class FileStoreIfSingletonFactory : virtual public FileStoreIfFactory {
 public:
  FileStoreIfSingletonFactory(const ::std::shared_ptr<FileStoreIf>& iface) : iface_(iface) {}
  virtual ~FileStoreIfSingletonFactory() {}

  virtual FileStoreIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(FileStoreIf* /* handler */) {}

 protected:
  ::std::shared_ptr<FileStoreIf> iface_;
};

class FileStoreNull : virtual public FileStoreIf {
 public:
  virtual ~FileStoreNull() {}
  void writeFile(const RFile& /* rFile */) {
    return;
  }
};

typedef struct _FileStore_writeFile_args__isset {
  _FileStore_writeFile_args__isset() : rFile(false) {}
  bool rFile :1;
} _FileStore_writeFile_args__isset;

class FileStore_writeFile_args {
 public:

  FileStore_writeFile_args(const FileStore_writeFile_args&);
  FileStore_writeFile_args& operator=(const FileStore_writeFile_args&);
  FileStore_writeFile_args() {
  }

  virtual ~FileStore_writeFile_args() noexcept;
  RFile rFile;

  _FileStore_writeFile_args__isset __isset;

  void __set_rFile(const RFile& val);

  bool operator == (const FileStore_writeFile_args & rhs) const
  {
    if (!(rFile == rhs.rFile))
      return false;
    return true;
  }
  bool operator != (const FileStore_writeFile_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_writeFile_pargs {
 public:


  virtual ~FileStore_writeFile_pargs() noexcept;
  const RFile* rFile;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_writeFile_result {
 public:

  FileStore_writeFile_result(const FileStore_writeFile_result&);
  FileStore_writeFile_result& operator=(const FileStore_writeFile_result&);
  FileStore_writeFile_result() {
  }

  virtual ~FileStore_writeFile_result() noexcept;

  bool operator == (const FileStore_writeFile_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const FileStore_writeFile_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const FileStore_writeFile_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class FileStore_writeFile_presult {
 public:


  virtual ~FileStore_writeFile_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class FileStoreClient : virtual public FileStoreIf {
 public:
  FileStoreClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  FileStoreClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void writeFile(const RFile& rFile);
  void send_writeFile(const RFile& rFile);
  void recv_writeFile();
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class FileStoreProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<FileStoreIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (FileStoreProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_writeFile(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  FileStoreProcessor(::std::shared_ptr<FileStoreIf> iface) :
    iface_(iface) {
    processMap_["writeFile"] = &FileStoreProcessor::process_writeFile;
  }

  virtual ~FileStoreProcessor() {}
};

class FileStoreProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  FileStoreProcessorFactory(const ::std::shared_ptr< FileStoreIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< FileStoreIfFactory > handlerFactory_;
};

class FileStoreMultiface : virtual public FileStoreIf {
 public:
  FileStoreMultiface(std::vector<std::shared_ptr<FileStoreIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~FileStoreMultiface() {}
 protected:
  std::vector<std::shared_ptr<FileStoreIf> > ifaces_;
  FileStoreMultiface() {}
  void add(::std::shared_ptr<FileStoreIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void writeFile(const RFile& rFile) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->writeFile(rFile);
    }
    ifaces_[i]->writeFile(rFile);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class FileStoreConcurrentClient : virtual public FileStoreIf {
 public:
  FileStoreConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  FileStoreConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void writeFile(const RFile& rFile);
  int32_t send_writeFile(const RFile& rFile);
  void recv_writeFile(const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif



#endif
